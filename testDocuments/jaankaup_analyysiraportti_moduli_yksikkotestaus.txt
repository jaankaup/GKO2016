Mylly ohjelman metodin yksikkö/modulitestaus sekä lause- ja haarakattavuus analyysiraportti.

Ryhmän nimi: jaankaup
Tekijän nimi: Janne Kauppinen
Sähköpostiosoite: janne.a.kauppinen@student.jyu.fi
Dokumentin nimi: analyysiraportti
Julkisuustaso: julkinen
Päivämäärä: 6.9.2017
Versio: 0.1.0
Opintojakson nimi: TIES546 Ohjelmistotestaus
Organisaatio: Jyväskylän yliopisto
Laitos: Tietotekniikan laitos
Projektin git url: git@yousource.it.jyu.fi:gko2016/gko2016.git

1. Kokemuksia harjoitustyöstä

Tässä projektissa oli ainoastaa yksi tekijä, joten tässä raportissa 
ei voi verrata eri tekijöiden suorittamia testauskertoja. Tässä 
raportissa keskitytään kertomaan harjoitustyöhön liittyviä kokemuksia 
ja esilletulevia ajatuksia.

1.1 Harjoutustyön haasteista

Hajoitustyön suurimpia haasteita oli löytää jokin hyvä testattava
kohde. Kun sellaista ei tahtonut löytyä, niin päätin ottaa vain
jonkun testattavan kohteen aikaisemmista projekteistani. Mylly pelin
tapahtumametodi vaikutti riittävän epätriviaalilta mutta kuitenkin
kohtalaisen suoraviivaiselta testauskohteelta.

Kun aloin tehdä testausapualiohjelmia, niin huomasin sen miten
tärkeää on ottaa huomioon testaus ennen kuin koko ohjelma on
valmis. Testien tekeminen jälkikäteen osoittautui melko hankalaksi.
Tilannetta pahenti se, että koko Mylly projekti oli tehty niin
sanotusti "hackaamalla" kasaan. Tarkoitan sillä sitä, että projekti
oli tehty ilman mitään suurempaa suunnittelua, vaan luokkia ja
metodeja luotiin lisää sitä mukaa kun oli tarve, ja mitä pitemmälle
ohjelman kehitys oli edennyt, sitä vaikeampaa siihen oli tehdä
enää mitään muutoksia. Tämä johtui paljolti siitä, ettei projektin 
alkuvaiheessa ollut vielä tarkkaa kuvaa siitä, mitä ollaan kehittämässä. 
Projekti olisi vielä tarvinnut joitakin iteraatioita, jotta olisi 
voinnut tehdä refaktorointia ja muita rakenteellisia toimenpiteitä 
ohjelman parantamiseksi.

Edellämainituista syistä ohjelmaan oli syntynyt esimekiksi
sellainen tilanne, että ohjelman kontrollilogiikka oli jakautunut
useaan eri paikkaan. Tämä vaikeutti testaamista oleellisesti,
sillä oikeanlaisten testitapausten ja oraakkelidatan määrittelyä
varten täytyi usein debugata ohjelmaa. Tällä tavalla selvisi se
miten ohjelma toimii ja mitkä ovat testattavan metodin loppuehdot.

Samalla "hacking" tyyliä käytin myös aputestimetodien ja oraakkelin
ohjelmoimisessa. Tämä johtui samasta syystä kuin myös testauksen
kohteena ollut Mylly ohjelma: aikaa oli melko vähän käytettävissä eikä
itselläni ollut aikaisempaa kokemusta vastaavanlaisesta projektista.

Ohjelmoinnissa oli tehtävä valintoja ajankäytön suhteen, ja näin
oraakkeli ja siihen liittyvät aliohjelmat jäivät lähes kokonaan
testaamatta. Ainoita testauksen kaltaisia toimenpiteitä olivat
mutaatioiden kylväminen testitapauksiin ja oraakkelin testidataan.
Testit menivät kyllä rikki mutaatioita kylvämällä, mutta on
todeenäköistä, että oraakkeliin ja testausapualiohjelmiin
jäi virheitä ja/tai epäjohdonmukaisuuksia.

Testidokumenttien otsikointi ja nimeämiset herättivät itsessäni 
hieman epävarmuutta. Toki ohjeet oli annettu, mutta kuitenkin 
esim. testiraporttien otsikointi tuntui melko oudoilta. On mahdollista 
että en osannut tulkita ohjeita täysin oikein, tai sitten tiedoston 
nimeämiset ja otsikoinnit olivat tarkoitettu tällaisiksi,
jotta ohjaajien olisi helpompi hallita eri ryhmiltä tulevia
raportteja. En tiedä menikö otsikoinnit aivan oikein, mutta 
en halunnut käyttää liikaa aikaa sen pohtimiseen.

1.2. Harjoitustyön hyötyjä ja parannusehdotuksia

Suurin hyöty harjoitustyöstä oli se, että se auttoi ymmärtään
testauksen merkityksen ja tarpeellisuuden ihan ohjelmistoprojekti
alusta saakka. Vaikka tilanne olisikin se, että aikaa ei jossakin
projektin vaiheessa olisi testaamiseen, niin ohjelma kannattaa pyrkiä
rakentamaan niin, että testien kirjoittaminen myöhemmin olisi
mahdollisimman helppoa. 3-taso arkkitehtyyri oli ihan hyvä valinta
Mylly projektia kehiteltäessä. Tällä tavalla testausta pystyi
tekemään ilman graafista käyttölittymää.

Testiraporttien merkitys näin pienessä ohjelmassa ei ehkä ollut
kovinkaan suuri, mutta jos projekti olisi ollut isompi, tai
jos kehittäjiä olisi ollut useampi, niin testausraporttien
merkitys olisi ollut varmaankin merkittävämpi. Etenkin jos
ohjelmistosta olisi käytössä eri versioita, niin tällöin myös
testaussuunnitelmat ja niiden versiointi olisi ollut hyvinkin
mielekästä.

Tässä harjoitustyössä testausraporttien tekeminen tuntui jotenkin
keinotekoiselta ja ehkä jopa tarpeettomiltakin, mutta toisaalta
oli hyvä harjoitella hieman testaussuunnitelmien ja tulosten
raportointia, sillä niillä on todenäköisesti suuri merkitys
oikeiden ohjemistoprojektien testauksen kannalta.

Testaissuunnitelman laatimisessa olisi ollut enemmän mieltä, jos
tässä harjoitustyöprojektissa olisi ollut useampi tekijä.
Testaussuunitelman laatiminen itselleen ei ehkä ollut ihanteellinen
tapa harjoitella asiaa. Testaussuunnitelman ymmärrettävyyden
arviointi oli jokseenkin hankalaa, sillä ko. raportin laatija
oli myöskin testauksen suorittaja. Tosin näinhän se saattaa
mennä oikeissakin projekteissa.

Mainittakoon vielä se, että ohjausvuoverkon laatiminen
testattavasta metodista auttoi hahmottamaan hyvin metodin
loogista rakennetta. Toki rakenteen hahmoitti myös koodia
katselemalla, mutta graafista oli helpompi nähdä metodin rakenne ja
tominta. Lisäksi graafi helpotti testitapausten luontia merkittävästi.

Lisäksi graafista näki helposti sen, että testattava
metodi oli melko monimutkainen, ja että sen olisi voinnut jakaa
useampaan pienpään aliohjelmaan (esim. kolmeen eri osaan riippuen
mikä pelin gamestate on päällä). Graafista näkyy selkeästi tämä
kolmijakoisuus.

1.3. Testauksen tavoitteiden saavuttaminen

Testauksen päätavoite saavutettiin, eli tutkittavan metodin
lause- ja haarakattavuus 12 yksikkötestillä. Varsinaisia
ohjelmointivirheitä ei testattaessa tullut ilmi, mutta joitakin
puuteita ja epäjohdonmukaisuuksia saatiin esille. Tosin nämä
eivät tulleet esille varsinaisesti yksikkötestaamalla, vaan
testitapauksia laatimalla. Puutteita ja ohjelman huonoja rakenteellisia
ongelmia jäi varmasti huomaamatta, mutta ajanpuutteen vuoksi
näitä ei etsitty määräänsä enempää.

1.4. Testausten hyöty Mylly ohjelmalle

Mylly peli on jo kuollut projekti siinä mielessä, ettei sen kehitystä
enää jatketa. Mylly peli on jo tässä vaiheessa niin kompleksinen, ettei
sitä olisi kovinkaan järkevää testata enempää. Testaaminen vain
vahvisti käsitystä siitä, että ko. ohjelma on hankala laajentaa,
ylläpitää ja testata. Ohjelma kaipaisi paljon refaktorointia ja
rakenteiden muokkaamista.

Toki jonkinmoisilla muutoksilla mylly pelistä saisi aikaiseksi erilaisia
yksinkertaisia pelejä, ehkä jopa jonkinlaisen nethack kaltaisen pelinkin.
Peli peruskompnentit on pyritty tekemään yleishyödyllisiksi, ja
perimällä luokkia niistä saisi ehkä laajennettua pelikenttää ja logiikkaa.
Tällöin oleellisimmat testauskohteet tulisi sijoittaa Mylly ohjelman
peruspalikoihin eli data-luokkiin ja MyllyViewModelin yleiskäyttöisimpiin
kohtiin. Erityisesti yksikkö/moduli testaus olisi ehkä ensisijainen testaus-
muoto tällaisessa tapauksessa.

1.5. Vaihtoehtoisia toteutusmalleja

Jos olisi ollut aikaa, niin olisi ollut hyvä tehdä sellainen testi,
että yksi testi olisi suorittanut kokonaisen pelin. Eli testi olisi
koostunut testattavan metodin kutsusarjasta, ja jokaisen kutsun
välillä olisi voinnut tehdä tarkistuksen oraakkelilla. Näin olisi
voinnut tehdä ns. testipelisarjoja. Testipelin olisi voinnut näin
ollen hahmottaa vaikkapa aidolla myllypelilaudalla, ja sisällyttää
niihin harvinaisia erikoistilanteita ja rajatapauksia.

Myös testitapausten luonti graafisen käyttöliittymän kautta olisi
ollut mielenkiintoista. Tämä olisi vaatinut graafisen käyttöliittymän
uudistamisen testikäyttöön. Testin alkutilanne ja lopputilanne olisi
voitu määritellä graafisen käyttöliittymän kautta, ja tämän jälkeen
testausdata olisi generoitunut ja tallentunut esimerkiksi ennaltamäärättyy
tiedostoon, jonka jälkeen olisi voitu luoda itse testi. Myöskin ns.
epäonnistuneet testit olisi ollut hyvä havainnollisia graafisen
käyttöliittymän kautta, tai sitten tulosteena tiedostossa.

1.6 Projektin aikataulut

Itselläni jäi harjoitustyö melko viime hetkeen johtuen eläntilanteestani.
Aikataulua sotki alituisesti perheen asioiden hoitamiset, lastenhoitajien
rekrytoinnit ja muut vastaavat tekijät. Itse projekti tuli tehtyä pätkissä
noin 2 viikon sisällä. Kaikesta huolimatta projekti edistyi omasta mielestäni
melko hyvin. Tiukka aikataulu oli mahdollinen siitäkin syystä, että
tein projektin yksin, enkä näin ollen ollut riippuvainen toisten
aikatauluista.





